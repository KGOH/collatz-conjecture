<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1493063903555">{:repl-history {:ide [], :local [&quot;(take 10\n  (cycle\n    (for [s (linspace 0 3 10)\n          r (linspace 0 5 10)\n          h (linspace 0 2 10)\n          g (linspace 0.1 2 10)]\n      {:s s, :r r, :h h, :g g})))&quot; &quot;(rest\n  (take 10\n    (cycle\n      (for [s (linspace 0 3 10)\n            r (linspace 0 5 10)\n            h (linspace 0 2 10)\n            g (linspace 0.1 2 10)]\n        {:s s, :r r, :h h, :g g}))))&quot; &quot;(defn setup-astro-intensity []\n  (q/frame-rate 120)\n  (cycle\n    (for [g [1] ;(linspace 0.1 2 10)\n          h [0.5] ;(linspace 0 2 10)\n          s (linspace 0 3 100)\n          r (concat (linspace 0 3 50) (reverse (linspace 3 0 50)))]\n      {:s s, :r r, :h h, :g g})))&quot; &quot;(linspace 3 0 50)&quot; &quot;(count\n  (for [g (linspace 0.1 2 10)\n        r (concat (linspace 0 5 25) (linspace 5 0 24))\n        s (linspace 0 3 9)\n        h (concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 (q/width))]\n      1)))&quot; &quot;(count\n  (for [g (linspace 0.1 2 10)\n        r (concat (linspace 0 5 25) (linspace 5 0 24))\n        s (linspace 0 3 9)\n        h (concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 256)]\n      1)))&quot; &quot;(count\n  (cycle\n    (for [g (linspace 0.8 1.2 3)\n          r (concat (linspace 0 5 25) (linspace 5 0 24))\n          s (linspace 0 3 9)\n          h (concat (linspace 0 2 10) (linspace 2 0 9))]\n      (for [l (linspace 0 1 (q/width))]\n        1))))&quot; &quot;(count\n  (cycle\n    (for [g (linspace 0.8 1.2 3)\n          r (concat (linspace 0 5 25) (linspace 5 0 24))\n          s (linspace 0 3 9)\n          h (concat (linspace 0 2 10) (linspace 2 0 9))]\n      (for [l (linspace 0 1 512)]\n        1))))&quot; &quot;(cycle\n  (count\n    (for [g (linspace 0.8 1.2 3)\n          r (concat (linspace 0 5 25) (linspace 5 0 24))\n          s (linspace 0 3 9)\n          h (concat (linspace 0 2 10) (linspace 2 0 9))]\n      (for [l (linspace 0 1 512)]\n        1))))&quot; &quot;(cycle\n  (count\n    (for [g (linspace 0.8 1.2 3)\n          r (concat (linspace 0 5 25) (linspace 5 0 24))\n          s (linspace 0 3 9)\n          h (concat (linspace 0 2 10) (linspace 2 0 9))]\n      (for [l (range 512)]\n        1))))&quot; &quot;(count\n  (for [g (linspace 0.8 1.2 3)\n        r (concat (linspace 0 5 25) (linspace 5 0 24))\n        s (linspace 0 3 9)\n        h (concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 512)]\n        1)))&quot; &quot;(count\n  (for [g [1];(linspace 0.8 1.2 3)\n        r [1];(concat (linspace 0 5 25) (linspace 5 0 24))\n        s [2];(linspace 0 3 9);(linspace 0 3 9)\n        h (concat (linspace 0.5 1.5 15) (linspace 1.5 0.5 14))] ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 (q/width))]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1];(linspace 0.8 1.2 3)\n        r [1];(concat (linspace 0 5 25) (linspace 5 0 24))\n        s [2];(linspace 0 3 9);(linspace 0 3 9)\n        h (concat (linspace 0.5 1.5 15) (linspace 1.5 0.5 14))] ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 512)]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1];(linspace 0.8 1.2 3)\n        r (concat (linspace 1 3 24) (linspace 3 1 24)) ;(concat (linspace 0 5 25) (linspace 5 0 24))\n        s [2];(linspace 0 3 9);(linspace 0 3 9)\n        h (concat (linspace 0.4 0.8 15) (linspace 0.8 0.4 14))] ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 (q/width))]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1];(linspace 0.8 1.2 3)\n        r (concat (linspace 1 3 24) (linspace 3 1 24)) ;(concat (linspace 0 5 25) (linspace 5 0 24))\n        s [2];(linspace 0 3 9);(linspace 0 3 9)\n        h (concat (linspace 0.4 0.8 15) (linspace 0.8 0.4 14))] ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n    (for [l (linspace 0 1 512)]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1]                                 ;(linspace 0.8 1.2 3)\n        r (concat (linspace 1 3 24) (linspace 3 1 24)) ;(concat (linspace 0 5 25) (linspace 5 0 24))\n        h (linspace 0.4 0.8 15) ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n        s (linspace 0 3 9)] ;(linspace 1 3 9)\n    (for [l (linspace 0 1 (q/width))]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1]                                 ;(linspace 0.8 1.2 3)\n        r (concat (linspace 1 3 24) (linspace 3 1 24)) ;(concat (linspace 0 5 25) (linspace 5 0 24))\n        h (linspace 0.4 0.8 15) ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n        s (linspace 0 3 9)] ;(linspace 1 3 9)\n    (for [l (linspace 0 1 512)]\n      (astro-intensity l s r h g))))&quot; &quot;(count\n  (for [g [1]                                 ;(linspace 0.8 1.2 3)\n        r (concat (linspace 1 3 24) (linspace 3 1 24)) ;(concat (linspace 0 5 25) (linspace 5 0 24))\n        h (linspace 0.4 0.8 15) ;(concat (linspace 0 2 10) (linspace 2 0 9))]\n        s (linspace 0 3 9)] ;(linspace 1 3 9)\n    (for [l (linspace 0 1 128)]\n      (astro-intensity l s r h g))))&quot; &quot;(defn astro-intensity [l s r h g]\n  (let [psi (* 2 q/PI (+ (/ s 3) (* r l)))\n        lg (q/pow l g)\n        a (* h lg (/ (- 1 lg) 2))]\n    (-&gt;&gt; (m/* a\n              (m/matrix [[-0.14861 1.78277]\n                         [-0.29227 -0.90649]\n                         [1.97294 0.0]])\n              (m/matrix [[(q/cos psi)] [(m/sin psi)]]))\n         (m/+ lg)\n         (m/* 255)\n         (m/map q/round)\n         (m/to-vecs)\n         (flatten))))&quot; &quot;(defn astro-intensity [l s r h g]\n  (let [psi (* 2 q/PI (+ (/ s 3) (* r l)))\n        lg (q/pow l g)\n        a (* h lg (/ (- 1 lg) 2))]\n    (-&gt;&gt; (m/* a\n              (m/matrix [[-0.14861 1.78277]\n                         [-0.29227 -0.90649]\n                         [1.97294 0.0]])\n              (m/matrix [[(q/cos psi)] [(q/sin psi)]]))\n         (m/+ lg)\n         (m/* 255)\n         (m/map q/round)\n         (m/to-vecs)\n         (flatten))))&quot; &quot;(defn astro-intensity [l s r h g]\n  (let [psi (* 2 q/PI (+ (/ s 3) (* r l)))\n        lg (q/pow l g)]\n    (-&gt;&gt; (m/* (* h lg (/ (- 1 lg) 2))\n              (m/matrix [[-0.14861 1.78277]\n                         [-0.29227 -0.90649]\n                         [1.97294 0.0]])\n              (m/matrix [[(q/cos psi)] [(q/sin psi)]]))\n         (m/+ lg)\n         (m/* 255)\n         (m/map q/round)\n         m/to-vecs\n         flatten)))&quot; &quot;(defn astro-intensity [l s r h g]\n  (let [psi (* 2 q/PI (+ (/ s 3) (* r l)))\n        lg (q/pow l g)]\n    (-&gt;&gt; (m/* (* h lg (/ (- 1 lg) 2))\n              (m/matrix [[-0.14861 1.78277]\n                         [-0.29227 -0.90649]\n                         [1.97294 0.0]])\n              (m/matrix [[(q/cos psi)] [(q/sin psi)]]))\n         (m/+ lg)\n         (m/* 255)\n         (m/map q/round)\n         (m/to-vecs)\n         (flatten))))&quot; &quot;(astro-intensity 0.5 2 3 1 1)&quot; &quot;(let [a 1]\n  (a 2))&quot; &quot;(let [a 1]\n  (list a 2))&quot; &quot;(let [a identity]\n  (a 2))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (:a m))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (map #(print (% m)) (m keys)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (key m)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (m key)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (key m) \\space)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (m key) \\space)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (m key))))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (key m) \&quot; \&quot;))\n  (println))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (m key) \&quot; \&quot;))\n  (println))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (m key) \&quot; \&quot;)))&quot; &quot;(let [m {:a \&quot;a\&quot;, 0 \&quot;0\&quot;}]\n  (doseq [key (keys m)]\n    (print (key m) \&quot; \&quot;)))\n  &quot; &quot;(defn radix-sort [num-seq]\n  (loop [radix-seq (map (fn [num] {:num num :quot num}) num-seq)]\n    (if (every? zero? (map #(quot (:quot %) 10) radix-seq))\n      radix-seq\n      (recur\n        (loop [new-seq (vec (repeat 10 []))\n               old-seq radix-seq]\n          (if (empty? old-seq)\n            new-seq\n            (recur\n              (update\n                new-seq\n                (mod (:quot (first old-seq)) 10)\n                (fn [bucket]\n                  (let [num (:num (first old-seq))\n                        quot1 (:quot (first old-seq))]\n                    (conj bucket {:num num :quot (if (zero? (quot quot1 10))\n                                                   quot1\n                                                   (quot quot1 10))}))))\n              (rest old-seq))))))))&quot; &quot;(defn radix-sort [num-seq]\n  (loop [radix-seq (map (fn [num] {:num num :quot num}) num-seq)]\n    (println radix-seq)\n    (if (every? zero? (map #(quot (:quot %) 10) radix-seq))\n      radix-seq\n      (recur\n        (loop [new-seq (vec (repeat 10 []))\n               old-seq radix-seq]\n          (if (empty? old-seq)\n            new-seq\n            (recur\n              (update\n                new-seq\n                (mod (:quot (first old-seq)) 10)\n                (fn [bucket]\n                  (let [num (:num (first old-seq))\n                        quot1 (:quot (first old-seq))]\n                    (conj bucket {:num num :quot (if (zero? (quot quot1 10))\n                                                   quot1\n                                                   (quot quot1 10))}))))\n              (rest old-seq))))))))&quot; &quot;(let [num-seq [27 17 13]]\n  (radix-sort num-seq))&quot; &quot;(defn draw-branch [step node pos]\n  (when (pos? step)\n    (let [next-step (dec step)]\n      (apply q/stroke (proportional-map 0 30 0 1 10))\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch next-step n (draw-line pos next-step -12))\n          (recur next-step (* 2 node) (draw-line pos next-step 12)))\n        (recur next-step (* 2 node) (draw-line pos next-step 2))))))&quot; &quot;(proportional-map 0 30 0 1 10)&quot; &quot;(defn draw-branch [step node pos]\n  (q/text (str node) (:x pos) (:y pos))\n  (when (pos? step)\n    (let [next-step (dec step)]\n      (apply q/stroke (my-color-scheme (proportional-map 0 25 0.2 0.8 step)))\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch next-step n (draw-line pos step 12))\n          (recur next-step (* 2 node) (draw-line pos step 0)))\n        (recur next-step (* 2 node) (draw-line pos step 0))))))&quot; &quot;(proportional-map 0 20 0.2 0.8 14)&quot; &quot;13&quot; &quot;(proportional-map 0 20 0.2 0.8 13)&quot; &quot;(my-color-scheme (proportional-map 0 20 0.2 0.8 13))&quot; &quot;(my-color-scheme (proportional-map 0 20 0.2 0.8 14))&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1920 1080]\n             :setup setup\n             :update update-state\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode m/navigation-2d])&quot; &quot;(defn draw-branch [depth {:keys [odd even not-forks] :as declinations} step node pos]\n  (when (&lt; node depth)\n    (let [color (my-color-scheme (proportional-map 1 175 0 1 (- depth step)))\n          width (proportional-map 1 175 5 0.1 (- depth step))\n          len 6; (proportional-map depth 7930 10 1 step)\n          next-step (dec step)]\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch depth declinations next-step n (draw-line pos odd len color width))\n          (recur depth declinations next-step (* 2 node) (draw-line pos even len color width)))\n        (recur depth declinations next-step (* 2 node) (draw-line pos not-forks len color width))))))&quot; &quot;(q/defsketch collatz-conjecture\n             :size [600 400]\n             :setup setup\n             :update update-state\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode m/navigation-2d])&quot; &quot;(q/defsketch collatz-conjecture\n             :size [800 600]\n             :setup setup\n             :update update-state\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode m/navigation-2d])&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1000 500]\n             :setup setup\n             :update update-state\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode m/navigation-2d])&quot; &quot;(linspace 0.02 -0.02 50) &quot; &quot;(defn draw-branch [depth {:keys [odd even not-forks] :as declinations} step node pos]\n  (when (&lt; node depth)\n    (let [color (my-color-scheme (proportional-map 1 175 0 1 (- depth step)))\n          width (proportional-map 1 175 2.6 0.1 (- depth step))\n          len 10; (proportional-map depth 7930 10 1 step)\n          next-step (dec step)]\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch depth declinations next-step n (draw-line pos odd len color width))\n          (recur depth declinations next-step (* 2 node) (draw-line pos even len color width)))\n        (recur depth declinations next-step (* 2 node) (draw-line pos not-forks len color width))))))&quot; &quot;(defn draw-branch [depth {:keys [odd even not-forks] :as declinations} step node pos]\n  (when (&lt; node depth)\n    (let [color (my-color-scheme (proportional-map 1 175 0 1 (- depth step)))\n          width (proportional-map 1 175 2.6 0.1 (- depth step))\n          len 9; (proportional-map depth 7930 10 1 step)\n          next-step (dec step)]\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch depth declinations next-step n (draw-line pos odd len color width))\n          (recur depth declinations next-step (* 2 node) (draw-line pos even len color width)))\n        (recur depth declinations next-step (* 2 node) (draw-line pos not-forks len color width))))))&quot; &quot;(defn draw-branch [depth {:keys [odd even not-forks] :as declinations} step node pos]\n  (when (&lt; node depth)\n    (let [color (my-color-scheme (proportional-map 1 175 0 1 (- depth step)))\n          width (proportional-map 1 175 2.6 0.1 (- depth step))\n          len 8; (proportional-map depth 7930 10 1 step)\n          next-step (dec step)]\n      (if-let [n (try-fork node)]\n        (do\n          (draw-branch depth declinations next-step n (draw-line pos odd len color width))\n          (recur depth declinations next-step (* 2 node) (draw-line pos even len color width)))\n        (recur depth declinations next-step (* 2 node) (draw-line pos not-forks len color width))))))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 50, :y 600}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 75, :y 600}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 75, :y 650}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 75, :y 640}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 75, :y 630}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 75, :y 620}))&quot; &quot;(defn draw-state [{:keys [depth root decl]}]\n  (q/background 255 255 255)\n  (q/text-size 2)\n  (q/stroke 0 0 0)\n  (draw-branch\n    depth\n    {:odd (+ 8.5 (first decl)),\n     :even (+ -20 (nth decl 15))\n     :not-forks (+ -2.8 (nth decl 10))}\n    depth\n    root\n    {:angle 20, :x 80, :y 620}))&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1334 750]\n             :setup setup\n             :update update-state\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode\n                          ;record-gif])\n                          m/navigation-2d])&quot; &quot;(defn draw-state [{:keys [depth root decl angles]}]\n  (q/background 255 255 255)\n  (draw-branch\n    depth\n    (-&gt; angles\n        (update :odd (partial + (nth decl 15)))\n        (update :even (partial + (first decl)))\n        (update :not-forks (partial + (nth decl 7))))\n    depth\n    root\n    {:angle (:init angles), :x 80, :y 320}))&quot; &quot;(defn draw-state [{:keys [depth root decl angles]}]\n  (q/background 255 255 255)\n  (draw-branch\n    depth\n    (-&gt; angles\n        (update :odd (partial + (nth decl 15)))\n        (update :even (partial + (first decl)))\n        (update :not-forks (partial + (nth decl 7))))\n    depth\n    root\n    {:angle (:init angles), :x 40, :y 320}))&quot; &quot;(defn reset-values [state]\n  (merge state (:defaults state)))&quot; &quot;(defn setup []\n  (q/frame-rate 30)\n  (-&gt; {:show-info    {:frame-rate true}\n       :defaults     {:depth  20000\n                      :root   1\n                      :angles {:init      20\n                               :not-forks -2.8\n                               :even      -20\n                               :odd       8.5}}\n       :decl         (cycle (concat\n                              (repeat 15 -0.02) (linspace -0.02 0.02 50)\n                              (repeat 14 0.02) (linspace 0.02 -0.02 49)))\n       :key-bindings {81 :dec-not-forks-angle\n                      87 :reset-not-forks-angle\n                      69 :inc-not-forks-angle\n                      65 :dec-even-angle\n                      83 :reset-even-angle\n                      68 :inc-even-angle\n                      90 :dec-odd-angle\n                      88 :reset-odd-angle\n                      67 :inc-odd-angle\n                      82 :inc-init-angle\n                      84 :reset-init-angle\n                      89 :dec-init-angle\n                      70 :inc-root\n                      71 :reset-root\n                      72 :dec-root\n                      86 :inc-depth\n                      66 :reset-depth\n                      78 :dec-depth}}\n      (reset-values)))&quot; &quot;(ns collatz-conjecture.scratch\n  (:require [clojure.zip :as zip]\n            [collatz-conjecture.misc :refer [height]]))&quot; &quot;c&quot; &quot;(zip/branch? c)&quot; &quot;(-&gt; c \n    (zip/next))&quot; &quot;(-&gt; c \n    (zip/down))&quot; &quot;(defn children-locs [loc]\n  (take-while (zip/down loc)))&quot; &quot;(defn children-locs [loc]\n  (loop [loc (zip/down loc)\n         children []]\n    (if-let [child (zip/right loc)]\n      (recur child (conj children child))\n      children)))&quot; &quot;(-&gt; c \n    (zip/children))&quot; &quot;(-&gt; c \n    (children-loc))&quot; &quot;(ns collatz-conjecture.scratch\n  (:require [clojure.zip :as zip]\n            [collatz-conjecture.misc :refer [height children-loc]]))&quot; &quot;(-&gt; c\n    (children-loc))&quot; &quot;(-&gt; c\n    (children-locs))&quot; &quot;(println (zip/children c))&quot; &quot;(defn children-locs [loc]\n  (loop [loc (zip/down loc)\n         children [loc]]\n    (if-let [child (zip/right loc)]\n      (recur child (conj children child))\n      children)))&quot; &quot;(defn children-locs [loc]\n  (loop [loc (zip/down loc)\n         children [loc]]\n    (if-let [next-child (zip/right loc)]\n      (recur next-child (conj children next-child))\n      children)))&quot; &quot;(println (children-locs c))&quot; &quot;(defn height [loc]\n  (if (zip/branch? loc)\n    (inc (apply max (map height (children-locs loc))))\n    0))&quot; &quot;(defn сollatz-conj-branch? [x]\n  (&lt; 0 x 20000))&quot; &quot;(def c (zip/zipper сollatz-conj-branch? сollatz-conj-children nil 16))&quot; &quot;(println (height c))&quot; &quot;(defn draw-branch\n  ([max-depth declinations node pos]\n   (draw-branch max-depth declinations node pos 0))\n  ([max-depth {:keys [odd even not-forks] :as declinations} node pos step]\n   (if (zip/branch? node)\n     (q/text (str (zip/node node)) (:x pos) (:y pos))\n     (let [next-node (zip/next node)\n           next-len 4                                       ;(proportional-map max-val 7930 10 1 step)\n           next-color (my-color-scheme-memo (proportional-map 0 20000 0 1 (zip/node next-node)))\n           next-step (inc step)\n           next-width (proportional-map 0 max-depth 1.3 0.1 next-step)]\n       (if (= 2 (count (zip/children node)))\n         (do\n           (draw-branch max-depth declinations next-node (draw-line pos odd next-len next-color next-width) next-step)\n           (let [next-node (zip/right next-node)\n                 next-color (my-color-scheme-memo (proportional-map 0 20000 0 1 (zip/node next-node)))]\n             (recur max-depth declinations next-node (draw-line pos even next-len next-color next-width) next-step)))\n         (recur max-depth declinations next-node (draw-line pos not-forks next-len next-color next-width) next-step))))))&quot; &quot;(defn draw-state [{:keys [zipper decl angles max-depth max-val]}]\n  (q/background 255 255 255)\n  ;(q/fill 0 0 0)\n  ;(q/text-size 5)\n  (draw-branch\n    max-depth\n    (-&gt; angles\n        (update :odd (partial + (nth decl 15)))\n        (update :even (partial + (first decl)))\n        (update :not-forks (partial + (nth decl 7))))\n    zipper\n    {:angle (angles :init), :x 40, :y 320}))&quot; &quot;(defn draw-state [{:keys [zipper decl angles max-depth max-val]}]\n  (q/background 255 255 255)\n  (q/fill 0 0 0)\n  (q/text-size 5)\n  (draw-branch\n    max-depth\n    (-&gt; angles\n        (update :odd (partial + (nth decl 15)))\n        (update :even (partial + (first decl)))\n        (update :not-forks (partial + (nth decl 7))))\n    zipper\n    {:angle (angles :init), :x 40, :y 320}))&quot; &quot;(defn draw-branch\n  ([max-depth declinations node pos]\n   (draw-branch max-depth declinations node pos 0))\n  ([max-depth {:keys [odd even not-forks] :as declinations} node pos step]\n   (if (zip/branch? node)\n     ;(q/text (str (zip/node node)) (:x pos) (:y pos))\n     (let [next-node (zip/next node)\n           next-len 4                                       ;(proportional-map max-val 7930 10 1 step)\n           next-color (my-color-scheme-memo (proportional-map 0 20000 0 1 (zip/node next-node)))\n           next-step (inc step)\n           next-width (proportional-map 0 max-depth 1.3 0.1 next-step)]\n       (if (= 2 (count (zip/children node)))\n         (do\n           (draw-branch max-depth declinations next-node (draw-line pos odd next-len next-color next-width) next-step)\n           (let [next-node (zip/right next-node)\n                 next-color (my-color-scheme-memo (proportional-map 0 20000 0 1 (zip/node next-node)))]\n             (recur max-depth declinations next-node (draw-line pos even next-len next-color next-width) next-step)))\n         (recur max-depth declinations next-node (draw-line pos not-forks next-len next-color next-width) next-step))))))&quot; &quot;(defn draw-branch\n  ([max-depth declinations node pos]\n   (draw-branch max-depth declinations node pos 0))\n  ([max-depth {:keys [odd even not-forks] :as declinations} node pos step]\n   (if (zip/branch? node)\n     ;(q/text (str (zip/node node)) (:x pos) (:y pos))\n     (let [next-node (zip/next node)\n           next-step (inc step)\n           next-len 8\n           next-color (my-color-scheme-memo (proportional-map 0 max-depth 0 1 step))\n           next-height (height next-node)\n           next-opacity (proportional-map 0 (- max-depth next-step) 127 255 next-height)\n           next-color (concat next-color [next-opacity])\n           _ (println next-height \&quot; \&quot; next-step)\n           next-width (proportional-map 0 next-height 2 0.5 next-step)]                                       ;(proportional-map max-val 7930 10 1 step)\n       (if (= 2 (count (zip/children node)))\n         (do\n           (draw-branch max-depth declinations next-node (draw-line pos odd next-len next-color next-width) next-step)\n           (let [next-node (zip/right next-node)\n                 next-color (my-color-scheme-memo (proportional-map 0 max-depth 0 1 step))\n                 next-height (height next-node)\n                 next-opacity (proportional-map 0 (- max-depth next-step) 127 255 next-height)\n                 next-color (concat next-color [next-opacity])\n                 next-width (proportional-map 0 next-height 2 0.5 next-step)]\n             (recur max-depth declinations next-node (draw-line pos even next-len next-color next-width) next-step)))\n         (recur max-depth declinations next-node (draw-line pos not-forks next-len next-color next-width) next-step))))))&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1334 750]\n             :setup setup\n             :update update-state\n             :key-pressed key-pressed\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode\n                          show-info])&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1334 750]\n             :setup setup\n             ;:update update-state\n             :key-pressed key-pressed\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode])&quot; &quot;(q/defsketch collatz-conjecture\n             :size [1334 750]\n             :setup setup\n             ;:update update-state\n             :key-pressed key-pressed\n             :draw draw-state\n             :info-provider info-provider\n             :middleware [m/fun-mode\n                          ;show-info])\n                          ;record-gif])\n                          m/navigation-2d])&quot; &quot;(defn update-state [state]\n  (println (:flag state) (:max-val state))\n  (-&gt; state\n      (update :decl rest)\n      (update :max-val (partial (if (:flag state) + -) 100))\n      (cond-&gt;\n        (or (and (:flag state) (&gt;= (:max-val state) 600))\n            (and (not (:flag state)) (&lt;= (:max-val state) 100)))\n        (update :flag not))\n      (reset-collatz-zipper)\n      (reset-max-depth)))&quot; &quot;(defn update-state [state]\n  (println (:flag state) (:max-val state))\n  (-&gt; state\n      (update :decl rest)\n      (cond-&gt;\n        (or (and (:flag state) (&gt;= (:max-val state) 600))\n            (and (not (:flag state)) (&lt;= (:max-val state) 100)))\n        (update :flag not))\n      (update :max-val (partial + (if (:flag state) +100 -100)))\n      (reset-collatz-zipper)\n      (reset-max-depth)))&quot; &quot;(defn update-state [state]\n  (-&gt; (cond-&gt; state\n        (or (and (:flag state) (&gt;= (:max-val state) 600))\n            (and (not (:flag state)) (&lt;= (:max-val state) 100)))\n        (update :flag not))\n      #(update % :max-val (partial + (if (:flag %) +100 -100)))\n      (reset-collatz-zipper)\n      (reset-max-depth)\n      (update :decl rest)))&quot; &quot;(defn record-gif [options]\n  (let [draw (:draw options (fn []))\n        updated-draw (fn [state]\n                       (draw state)\n                       (g/save-animation \&quot;conjecture.gif\&quot; 300 0))]\n    (assoc options :draw updated-draw)))&quot;], :remote []}}</component>
</project>